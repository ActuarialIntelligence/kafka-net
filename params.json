{"name":"Kafka-net","tagline":"Native C# client for Kafka queue servers.","body":"kafka-net\r\n=========\r\n\r\nNative C# client for Kafka queue servers.  \r\n\r\nLicense\r\n-----------\r\nCopyright 2014, James Roland under Apache License, V2.0. See LICENSE file.\r\n\r\nSummary\r\n-----------\r\nThis project is a .NET implementation of the [Apache Kafka] protocol.  The wire protocol portion is based on the [kafka-python] library writen by [David Arthur] and the general class layout attempts to follow a similar pattern as his project.  To that end, this project builds up from the low level KafkaConnection object for handling async requests to/from the kafka server, all the way up to a higher level Producer/Consumer classes.\r\n\r\nExamples\r\n-----------\r\n##### Producer\r\n```sh\r\nvar options = new KafkaOptions(new Uri(\"http://SERVER1:9092\"), new Uri(\"http://SERVER2:9092\"));\r\nvar router = new BrokerRouter(options);\r\nvar client = new Producer(router);\r\n\r\nclient.SendMessageAsync(\"TestHarness\", new[] { new Message { Value = message } }).Wait();\r\n\r\nusing (client) { }\r\n```\r\n##### Consumer\r\n```sh\r\nvar options = new KafkaOptions(new Uri(\"http://SERVER1:9092\"), new Uri(\"http://SERVER2:9092\"));\r\nvar router = new BrokerRouter(options);\r\nvar consumer = new Consumer(new ConsumerOptions { Topic = \"TestHarness\", Router = router });\r\n\r\n//Consume returns a blocking IEnumerable (ie: never ending stream)\r\nforeach (var message in consumer.Consume())\r\n{\r\n    Console.WriteLine(\"Response: P{0},O{1} : {2}\", \r\n        message.Meta.PartitionId, message.Meta.Offset, message.Value);  \r\n}\r\n```\r\n\r\n##### TestHarness\r\nThe TestHarness project it a simple example console application that will read message from a kafka server and write them to the screen.  It will also take anything typed in the console and send this as a message to the kafka servers.  \r\n\r\nSimply modify the kafka server Uri in the code to point to a functioning test server.\r\n\r\n\r\nPieces of the Puzzel\r\n-----------\r\n##### Protocol\r\nThe protocol has been divided up into concrete classes for each request/response pair.  Each class knows how to encode and decode itself into/from their appropriate Kafka protocol byte array.  One benefit of this is that it allows for a nice generic send method on the KafkaConnection.\r\n\r\n##### KafkaConnection\r\nProvides async methods on a persistent connection to a kafka broker (server).  The send method uses the TcpClient send async function and the read stream has a dedicated thread which uses the correlation Id to match send responses to the correct request.\r\n\r\n##### BrokerRouter\r\nProvides metadata based routing of messages to the correct Kafka partition.  This class also manages the multiple KafkaConnections for each Kafka server returned by the broker section in the metadata response.  Routing logic is provided by the IPartitionSelector.\r\n\r\n##### IPartitionSelector\r\nProvides the logic for routing which partition the BrokerRouter should choose.  The default selector is the DefaultPartitionSelector which will use round robin partition selection if the key property on the message is null and a mod/hash of the key value if present.\r\n\r\n##### Producer\r\nProvides a higher level class which uses the combination of the BrokerRouter and KafkaConnection to send batches of messages to a Kafka broker.\r\n\r\n##### Consumer\r\nProvides a higher level class which will consumer messages from a whitelist of partitions from a single topic.  The consumption mechanism is a blocking IEnumerable of messages.  If no whitelist is provided then all partitions will be consumed creating one KafkaConnection for each partition leader.\r\n\r\n\r\n\r\nStatus\r\n-----------\r\nThe current version of this project is a functioning \"work in progress\" as it was only started in early February.  The wire protocol is complete except for Offset Commits to the servers (as there is a bug in 0.8.0 which prevents testing of this feature).  The library is functioning in that there is a complete Producer and Consumer class thus messages can pass to and from a Kafka server.  \r\n\r\n##### The major items that needs work are:\r\n* Better handling of options for providing customization of internal behaviour of the base API. (right now the classes pass around option parameters)\r\n* General structure of the classes is not finalized and breaking changes will occur.\r\n* Compression of message sets is not currently implemented.  \r\n* Offset Commits - central storage of offset progress, not implemented\r\n* Currently only works with .NET Framework 4.5 as it uses the await command.\r\n* nuget package.\r\n* Test coverage.\r\n* Documentation.\r\n\r\nComment\r\n----------\r\nThis is a pet project for me and is not currently backed by a need for a Kafka server client.  Which means the client is only currently being tested against a small set of Kafka test servers and not against any server that has any real data load.  \r\n\r\n\r\n\r\n\r\n\r\n\r\n[kafka-python]:https://github.com/mumrah/kafka-python\r\n[Apache Kafka]:http://kafka.apache.org\r\n[David Arthur]:https://github.com/mumrah","google":"UA-48567102-2","note":"Don't delete this file! It's used internally to help with page regeneration."}