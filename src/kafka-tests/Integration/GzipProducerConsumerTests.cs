using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using KafkaNet;
using KafkaNet.Model;
using KafkaNet.Protocol;
using NUnit.Framework;

namespace kafka_tests.Integration
{
    [TestFixture]
    [Category("Integration")]
    public class GzipProducerConsumerTests
    {
        private BrokerRouter _router;

        [SetUp]
        public void Setup()
        {
            var options = new KafkaOptions(new Uri(ConfigurationManager.AppSettings["IntegrationKafkaServerUrl"]));

            _router = new BrokerRouter(options);
        }
        
        //[Test]
        //public void EnsureGzipCompressionIsCompatibleNewLib()
        //{
        //    //generated by python library
        //    var expectedEncode = new byte[]
        //        {
        //            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 45, 70, 24, 62, 0, 0, 0, 0, 0, 1, 49, 0, 0, 0, 1, 48, 0, 0, 0, 0,
        //            0, 0, 0, 0, 0, 0, 0, 16, 90, 65, 40, 168, 0, 0, 0, 0, 0, 1, 49, 0, 0, 0, 1, 49, 0, 0, 0, 0, 0, 0, 0,
        //            0, 0, 0, 0, 16, 195, 72, 121, 18, 0, 0, 0, 0, 0, 1, 49, 0, 0, 0, 1, 50
        //        };

        //    var expectedGzip = new byte[]
        //        {
        //            31, 139, 8, 0, 37, 25, 34, 83, 2, 255, 99, 96, 128, 3, 1, 93, 55, 9, 59, 48, 139, 209, 16, 68, 24, 48,
        //            32, 201, 69, 57, 106, 172, 64, 146, 51, 68, 150, 59, 236, 81, 41, 132, 36, 103, 4, 0, 98, 202, 190,
        //            83, 84, 0, 0, 0
        //        };

        //    //var kafkaResult = new byte[]
        //    //    {
        //    //        31, 139, 8, 0, 0, 0, 0, 0, 0, 0, 99, 96, 128, 3, 1, 93, 55, 9, 59, 48, 139, 209, 16, 68, 24, 64, 197
        //    //        , 25, 65, 114, 81, 142, 26, 43, 144, 228, 12, 161, 114, 76, 32, 185, 195, 30, 149, 66, 72, 114, 70,
        //    //        0, 12, 228, 34, 56, 84, 0, 0, 0
        //    //    };

        //    var messages = new[]
        //        {
        //            new Message {Value = "0", Key = "1"},
        //            new Message {Value = "1", Key = "1"},
        //            new Message {Value = "2", Key = "1"}
        //        };

        //    var encoded = Message.EncodeMessageSet(messages);

        //    Assert.That(expectedEncode, Is.EqualTo(encoded));
        //    Assert.That(Compression.Unzip(expectedGzip), Is.EqualTo(encoded));

        //    var result = Compression.Zip(encoded);

        //    Assert.That(Compression.Unzip(result), Is.EqualTo(encoded));

        //    Assert.That(result, Is.EqualTo(expectedGzip));
        //}

        [Test]
        public void EnsureGzipCompressedMessageCanSend()
        {
            var conn = _router.SelectBrokerRoute("CompressTest", 0);

            var request = new ProduceRequest
            {
                Acks = 1,
                TimeoutMS = 1000,
                Payload = new List<Payload>
                                {
                                    new Payload
                                        {
                                            Codec = MessageCodec.CodecGzip,
                                            Topic = "NewTopic",
                                            Partition = 0,
                                            Messages = new List<Message>
                                                    {
                                                        new Message {Value = "0", Key = "1"},
                                                        new Message {Value = "1", Key = "1"},
                                                        new Message {Value = "2", Key = "1"}
                                                    }
                                        }
                                }
            };

            var response = conn.Connection.SendAsync(request).Result;
            Assert.That(response.First().Error, Is.EqualTo(0));

            //var offsets = producer.GetTopicOffsetAsync("NewTopic").Result;

            //var consumer = new Consumer(new ConsumerOptions("NewTopic", _router),
            //    offsets.Select(x => new OffsetPosition(x.PartitionId, x.Offsets.Max())).ToArray());

            //var response = producer.SendMessageAsync("NewTopic", new[]
            //    {
            //        new Message {Value = "0", Key = "1"},
            //        new Message {Value = "1", Key = "1"},
            //        new Message {Value = "2", Key = "1"}
            //    }, codec: MessageCodec.CodecGzip).Result;

            //Assert.That(response.First().Error, Is.EqualTo(0));

            //var results = consumer.Consume().Take(3).ToList();

            //for (int i = 0; i < 3; i++)
            //{
            //    Assert.That(results[i].Value, Is.EqualTo(i.ToString()));
            //}
        }

        [Test]
        public void EnsureGzipCanDecompressMessageFromKafka()
        {
            var producer = new Producer(_router);

            var offsets = producer.GetTopicOffsetAsync("Empty").Result;

            var consumer = new Consumer(new ConsumerOptions("Empty", _router),
                offsets.Select(x => new OffsetPosition(x.PartitionId, 0)).ToArray());
            
            var results = consumer.Consume().Take(3).ToList();

            for (int i = 0; i < 3; i++)
            {
                Assert.That(results[i].Value, Is.EqualTo(i.ToString()));
            }
        }
    }
}
